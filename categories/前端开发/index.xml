<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>前端开发 - 分类 - 志洋的博客</title>
        <link>http://example.org/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
        <description>前端开发 - 分类 - 志洋的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 22 Sep 2020 17:05:53 &#43;0800</lastBuildDate><atom:link href="http://example.org/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/" rel="self" type="application/rss+xml" /><item>
    <title>React中的懒加载</title>
    <link>http://example.org/posts/react-lazy-load/</link>
    <pubDate>Tue, 22 Sep 2020 17:05:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/react-lazy-load/</guid>
    <description><![CDATA[React中的懒加载（Lazy Load）有两种实现方式，一个是通过React.lazy，另一个是通过叫做loadable components]]></description>
</item><item>
    <title>关于ESM的default import以及TypeScript的坑</title>
    <link>http://example.org/posts/about-default-import-and-ts-config/</link>
    <pubDate>Tue, 18 Aug 2020 20:23:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/about-default-import-and-ts-config/</guid>
    <description><![CDATA[<p>最近实习期间在做一个基于Electron的开发调试工具，然后想利用<a href="https://github.com/microsoft/node-pty" target="_blank" rel="noopener noreffer">node-pty</a>以及<a href="https://github.com/xtermjs/xterm.js/" target="_blank" rel="noopener noreffer">xterm</a>把terminal集成进来，就像VSCode里面的terminal一样，然后遇到了大坑。研究了很久才发现原来是使用默认导入（default import）的问题……</p>]]></description>
</item><item>
    <title>搭建基于Webpack, TypeScript和React的Electron开发框架</title>
    <link>http://example.org/posts/electron-forge-with-react/</link>
    <pubDate>Wed, 29 Jul 2020 10:33:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/electron-forge-with-react/</guid>
    <description><![CDATA[<p>最近的实习项目需要基于Electron来做，如果能把Webpack, TypeScript和React也融入到开发过程中就再好不过了。这里记录一下搭建这样一个开发框架的过程。</p>]]></description>
</item><item>
    <title>从源码构建和运行VS Code</title>
    <link>http://example.org/posts/build-vscode/</link>
    <pubDate>Wed, 22 Jul 2020 13:52:49 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/build-vscode/</guid>
    <description><![CDATA[<p>VS Code是一个基于Electron的开源的代码编辑器。最近由于项目需要，要分析一下VS Code，因此打算先clone它的源码，然后构建运行起来。可能是因为我的网不好，再加上GFW的原因，这个过程异常艰难。因此在这里记录一下整个的构建过程。</p>]]></description>
</item><item>
    <title>React与Java Spring后台联合开发</title>
    <link>http://example.org/posts/react%E4%B8%8Ejava-spring%E5%90%8E%E5%8F%B0%E8%81%94%E5%90%88%E5%BC%80%E5%8F%91/</link>
    <pubDate>Mon, 15 Jun 2020 22:54:07 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/react%E4%B8%8Ejava-spring%E5%90%8E%E5%8F%B0%E8%81%94%E5%90%88%E5%BC%80%E5%8F%91/</guid>
    <description><![CDATA[<p>最近自学了React，用Create React App脚手架做了一个小<a href="https://github.com/lzyang1995/Millionare-Hero" target="_blank" rel="noopener noreffer">demo</a>，然而Create React App毕竟是用来做单页应用的，可能不太适合做多页面的网站。并且即将去实习的单位是用Java做后台，因此就在想如何在开发过程中把React和Java Spring框架结合起来。这里我找到了一个教程：<a href="https://spring.io/guides/tutorials/react-and-spring-data-rest/">https://spring.io/guides/tutorials/react-and-spring-data-rest/</a>，提供了很大的帮助，但是该教程在构建后台应用方面说的比较详细，在关键的如何在项目中引入前端框架方面却说的不太清楚。研究了一番之后大致清楚了具体做法和部分原理，在这里记录和分享一下。</p>]]></description>
</item></channel>
</rss>
